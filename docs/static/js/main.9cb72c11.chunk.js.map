{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","event","target","getGifs","category","a","query","encodeURI","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGridApp","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"iMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAe9C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAKlB,SACI,uBAAOO,KAAK,OACRC,MAAOT,EACPU,SAfc,SAACC,GAAD,OAAWV,EAAcU,EAAMC,OAAOH,a,+BCPvDI,EAAO,uCAAG,WAAMC,GAAN,yBAAAC,EAAA,4DAEJ,uCACA,mCACD,GACRC,EAAQC,UAAUH,GAElBI,EAPa,UAEJ,uCAFI,oBAGJ,mCAHI,kBAIL,GAJK,cAOyCF,GAPzC,SAQAG,MAAMD,GARN,cAQbE,EARa,iBAUIA,EAAKC,OAVT,wBAUXC,EAVW,EAUXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAKO,EAAIG,OAAOC,iBAAiBX,QAhBtB,kBAoBZK,GApBY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACrC,OACI,qBAAKa,UAAU,yCAAf,SACI,qBAAKC,IAAKd,EAAKe,IAAKN,OCDnBO,EAAa,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECDhB,SAACA,GAAc,IAAD,EAEZf,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAgBtC,OATAC,qBAAU,WACNzB,EAAQC,GAAUyB,MAAK,SAACX,GACpBS,EAAS,CACLf,KAAMM,EACNO,SAAS,SAGlB,CAACrB,IAEGsB,EDb2BI,CAAa1B,GAAjCc,EAF0B,EAEhCN,KAAca,EAFkB,EAElBA,QAEtB,OACI,qCACI,6BAAKrB,IAEHqB,GAAW,6CAEb,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEWtBe,EAxBM,WAAO,IAAD,EAEa1C,mBAAS,CAAC,WAFvB,mBAEhBQ,EAFgB,KAEJT,EAFI,KAIvB,OACI,qCACI,gDAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAGA,6BAEQS,EAAWiB,KAAI,SAACV,GAAD,OACX,cAAC,EAAD,CAA2BA,SAAUA,GAApBA,Y,MChBzC4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9cb72c11.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (event) => setInputValue(event.target.value);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories((categories) => [inputValue, ...categories]);\r\n            setInputValue('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input type=\"text\" \r\n                value={inputValue} \r\n                onChange={ handleInputChange } \r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n","export const getGifs = async(category) => {\r\n\r\n    const apiUrl = 'https://api.giphy.com/v1/gifs/search';\r\n    const apiKey = 'sUTfO7y4PU9wl7g9svwRBkAgGftRMGQW';\r\n    const limit = 10;\r\n    const query = encodeURI(category);\r\n\r\n    const url = `${apiUrl}?api_key=${apiKey}&limit=${limit}&q=${query}`;\r\n    const resp = await fetch(url);\r\n\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGridApp = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n    \r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            { loading && <p>Cargando ...</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map((img) => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then((images) => {\r\n            setState({\r\n                data: images,\r\n                loading: false\r\n            });\r\n        });\r\n    }, [category]);\r\n\r\n    return state;\r\n};","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGridApp } from './components/GifGrid';\r\n// import PropTypes from 'prop-types'\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Monkey']);\r\n\r\n    return (\r\n        <>\r\n            <h2>Gif Expert App</h2>\r\n\r\n            <AddCategory setCategories={ setCategories }/>\r\n\r\n            <hr />\r\n\r\n\r\n            <ol>\r\n                { \r\n                    categories.map((category) => (\r\n                        <GifGridApp key={category} category={category} />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}